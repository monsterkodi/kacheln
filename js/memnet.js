// koffee 1.14.0

/*
00     00  00000000  00     00  000   000  00000000  000000000
000   000  000       000   000  0000  000  000          000   
000000000  0000000   000000000  000 0 000  0000000      000   
000 0 000  000       000 0 000  000  0000  000          000   
000   000  00000000  000   000  000   000  00000000     000
 */
var r_max, rx_max, sysinfo, tick, tx_max, w_max;

sysinfo = require('systeminformation');

r_max = 100;

w_max = 100;

rx_max = 100;

tx_max = 100;

tick = function() {
    sysinfo.getDynamicData((function(_this) {
        return function(d) {
            var nd, r_sec, rx_sec, tx_sec, w_sec;
            if (Math.abs(d.networkStats[0].ms - 1000) > 100) {
                rx_sec = Math.min(rx_max, parseInt(d.networkStats[0].rx_sec));
                tx_sec = Math.min(tx_max, parseInt(d.networkStats[0].tx_sec));
            } else {
                rx_sec = parseInt(d.networkStats[0].rx_sec);
                tx_sec = parseInt(d.networkStats[0].tx_sec);
            }
            rx_max = Math.max(rx_max, rx_sec);
            tx_max = Math.max(tx_max, tx_sec);
            nd = {
                mem: {
                    used: d.mem.used,
                    total: d.mem.total,
                    active: d.mem.active
                },
                net: {
                    rx_fac: rx_sec / rx_max,
                    tx_fac: tx_sec / tx_max,
                    rx_sec: rx_sec,
                    tx_sec: tx_sec,
                    rx_max: rx_max,
                    tx_max: tx_max
                },
                cpu: {
                    sys: d.currentLoad.currentload / 100,
                    usr: d.currentLoad.currentload_user / 100
                }
            };
            if (d.disksIO != null) {
                r_sec = d.disksIO.rIO_sec;
                w_sec = d.disksIO.wIO_sec;
                r_max = Math.max(r_max, r_sec);
                w_max = Math.max(w_max, w_sec);
                nd.dsk = {
                    r_fac: r_sec / r_max,
                    w_fac: w_sec / w_max,
                    r_sec: r_sec,
                    w_sec: w_sec,
                    r_max: r_max,
                    w_max: w_max
                };
            }
            return process.send(JSON.stringify(nd));
        };
    })(this));
    return setTimeout(tick, 1000 - (new Date).getMilliseconds());
};

tick();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVtbmV0LmpzIiwic291cmNlUm9vdCI6Ii4uL2NvZmZlZSIsInNvdXJjZXMiOlsibWVtbmV0LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7O0FBQUEsSUFBQTs7QUFRQSxPQUFBLEdBQVcsT0FBQSxDQUFRLG1CQUFSOztBQUVYLEtBQUEsR0FBUzs7QUFDVCxLQUFBLEdBQVM7O0FBRVQsTUFBQSxHQUFTOztBQUNULE1BQUEsR0FBUzs7QUFFVCxJQUFBLEdBQU8sU0FBQTtJQUVILE9BQU8sQ0FBQyxjQUFSLENBQXVCLENBQUEsU0FBQSxLQUFBO2VBQUEsU0FBQyxDQUFEO0FBRW5CLGdCQUFBO1lBQUEsSUFBRyxJQUFJLENBQUMsR0FBTCxDQUFTLENBQUMsQ0FBQyxZQUFhLENBQUEsQ0FBQSxDQUFFLENBQUMsRUFBbEIsR0FBdUIsSUFBaEMsQ0FBQSxHQUF3QyxHQUEzQztnQkFDSSxNQUFBLEdBQVMsSUFBSSxDQUFDLEdBQUwsQ0FBUyxNQUFULEVBQWlCLFFBQUEsQ0FBUyxDQUFDLENBQUMsWUFBYSxDQUFBLENBQUEsQ0FBRSxDQUFDLE1BQTNCLENBQWpCO2dCQUNULE1BQUEsR0FBUyxJQUFJLENBQUMsR0FBTCxDQUFTLE1BQVQsRUFBaUIsUUFBQSxDQUFTLENBQUMsQ0FBQyxZQUFhLENBQUEsQ0FBQSxDQUFFLENBQUMsTUFBM0IsQ0FBakIsRUFGYjthQUFBLE1BQUE7Z0JBSUksTUFBQSxHQUFTLFFBQUEsQ0FBUyxDQUFDLENBQUMsWUFBYSxDQUFBLENBQUEsQ0FBRSxDQUFDLE1BQTNCO2dCQUNULE1BQUEsR0FBUyxRQUFBLENBQVMsQ0FBQyxDQUFDLFlBQWEsQ0FBQSxDQUFBLENBQUUsQ0FBQyxNQUEzQixFQUxiOztZQU9BLE1BQUEsR0FBUyxJQUFJLENBQUMsR0FBTCxDQUFTLE1BQVQsRUFBaUIsTUFBakI7WUFDVCxNQUFBLEdBQVMsSUFBSSxDQUFDLEdBQUwsQ0FBUyxNQUFULEVBQWlCLE1BQWpCO1lBRVQsRUFBQSxHQUNJO2dCQUFBLEdBQUEsRUFDSTtvQkFBQSxJQUFBLEVBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFkO29CQUNBLEtBQUEsRUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLEtBRGQ7b0JBRUEsTUFBQSxFQUFRLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFGZDtpQkFESjtnQkFJQSxHQUFBLEVBQ0k7b0JBQUEsTUFBQSxFQUFRLE1BQUEsR0FBTyxNQUFmO29CQUNBLE1BQUEsRUFBUSxNQUFBLEdBQU8sTUFEZjtvQkFFQSxNQUFBLEVBQVEsTUFGUjtvQkFHQSxNQUFBLEVBQVEsTUFIUjtvQkFJQSxNQUFBLEVBQVEsTUFKUjtvQkFLQSxNQUFBLEVBQVEsTUFMUjtpQkFMSjtnQkFXQSxHQUFBLEVBQ0k7b0JBQUEsR0FBQSxFQUFLLENBQUMsQ0FBQyxXQUFXLENBQUMsV0FBZCxHQUEwQixHQUEvQjtvQkFDQSxHQUFBLEVBQUssQ0FBQyxDQUFDLFdBQVcsQ0FBQyxnQkFBZCxHQUErQixHQURwQztpQkFaSjs7WUFlSixJQUFHLGlCQUFIO2dCQUVJLEtBQUEsR0FBUSxDQUFDLENBQUMsT0FBTyxDQUFDO2dCQUNsQixLQUFBLEdBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQztnQkFFbEIsS0FBQSxHQUFRLElBQUksQ0FBQyxHQUFMLENBQVMsS0FBVCxFQUFnQixLQUFoQjtnQkFDUixLQUFBLEdBQVEsSUFBSSxDQUFDLEdBQUwsQ0FBUyxLQUFULEVBQWdCLEtBQWhCO2dCQUVSLEVBQUUsQ0FBQyxHQUFILEdBQ0k7b0JBQUEsS0FBQSxFQUFPLEtBQUEsR0FBTSxLQUFiO29CQUNBLEtBQUEsRUFBTyxLQUFBLEdBQU0sS0FEYjtvQkFFQSxLQUFBLEVBQU8sS0FGUDtvQkFHQSxLQUFBLEVBQU8sS0FIUDtvQkFJQSxLQUFBLEVBQU8sS0FKUDtvQkFLQSxLQUFBLEVBQU8sS0FMUDtrQkFUUjs7bUJBZ0JBLE9BQU8sQ0FBQyxJQUFSLENBQWEsSUFBSSxDQUFDLFNBQUwsQ0FBZSxFQUFmLENBQWI7UUE1Q21CO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUF2QjtXQThDQSxVQUFBLENBQVcsSUFBWCxFQUFpQixJQUFBLEdBQU8sQ0FBQyxJQUFJLElBQUwsQ0FBVSxDQUFDLGVBQVgsQ0FBQSxDQUF4QjtBQWhERzs7QUFrRFAsSUFBQSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiIyMjXG4wMCAgICAgMDAgIDAwMDAwMDAwICAwMCAgICAgMDAgIDAwMCAgIDAwMCAgMDAwMDAwMDAgIDAwMDAwMDAwMFxuMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgMDAwICAwMDAwICAwMDAgIDAwMCAgICAgICAgICAwMDAgICBcbjAwMDAwMDAwMCAgMDAwMDAwMCAgIDAwMDAwMDAwMCAgMDAwIDAgMDAwICAwMDAwMDAwICAgICAgMDAwICAgXG4wMDAgMCAwMDAgIDAwMCAgICAgICAwMDAgMCAwMDAgIDAwMCAgMDAwMCAgMDAwICAgICAgICAgIDAwMCAgIFxuMDAwICAgMDAwICAwMDAwMDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMDAwMDAwICAgICAwMDAgICBcbiMjI1xuXG5zeXNpbmZvICA9IHJlcXVpcmUgJ3N5c3RlbWluZm9ybWF0aW9uJ1xuXG5yX21heCAgPSAxMDBcbndfbWF4ICA9IDEwMFxuXG5yeF9tYXggPSAxMDBcbnR4X21heCA9IDEwMFxuXG50aWNrID0gLT5cbiAgICBcbiAgICBzeXNpbmZvLmdldER5bmFtaWNEYXRhIChkKSA9PlxuICAgIFxuICAgICAgICBpZiBNYXRoLmFicyhkLm5ldHdvcmtTdGF0c1swXS5tcyAtIDEwMDApID4gMTAwICMgZG9uJ3QgdHJ1c3QgdGhvc2UgdmFsdWVzIHdpdGggd3JvbmcgbXMgdGltZSBzcGFuXG4gICAgICAgICAgICByeF9zZWMgPSBNYXRoLm1pbiByeF9tYXgsIHBhcnNlSW50IGQubmV0d29ya1N0YXRzWzBdLnJ4X3NlY1xuICAgICAgICAgICAgdHhfc2VjID0gTWF0aC5taW4gdHhfbWF4LCBwYXJzZUludCBkLm5ldHdvcmtTdGF0c1swXS50eF9zZWNcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgcnhfc2VjID0gcGFyc2VJbnQgZC5uZXR3b3JrU3RhdHNbMF0ucnhfc2VjXG4gICAgICAgICAgICB0eF9zZWMgPSBwYXJzZUludCBkLm5ldHdvcmtTdGF0c1swXS50eF9zZWNcbiAgICAgICAgXG4gICAgICAgIHJ4X21heCA9IE1hdGgubWF4IHJ4X21heCwgcnhfc2VjXG4gICAgICAgIHR4X21heCA9IE1hdGgubWF4IHR4X21heCwgdHhfc2VjXG4gICAgICAgIFxuICAgICAgICBuZCA9XG4gICAgICAgICAgICBtZW06IFxuICAgICAgICAgICAgICAgIHVzZWQ6ICAgZC5tZW0udXNlZFxuICAgICAgICAgICAgICAgIHRvdGFsOiAgZC5tZW0udG90YWxcbiAgICAgICAgICAgICAgICBhY3RpdmU6IGQubWVtLmFjdGl2ZVxuICAgICAgICAgICAgbmV0OlxuICAgICAgICAgICAgICAgIHJ4X2ZhYzogcnhfc2VjL3J4X21heFxuICAgICAgICAgICAgICAgIHR4X2ZhYzogdHhfc2VjL3R4X21heFxuICAgICAgICAgICAgICAgIHJ4X3NlYzogcnhfc2VjXG4gICAgICAgICAgICAgICAgdHhfc2VjOiB0eF9zZWNcbiAgICAgICAgICAgICAgICByeF9tYXg6IHJ4X21heFxuICAgICAgICAgICAgICAgIHR4X21heDogdHhfbWF4XG4gICAgICAgICAgICBjcHU6XG4gICAgICAgICAgICAgICAgc3lzOiBkLmN1cnJlbnRMb2FkLmN1cnJlbnRsb2FkLzEwMCBcbiAgICAgICAgICAgICAgICB1c3I6IGQuY3VycmVudExvYWQuY3VycmVudGxvYWRfdXNlci8xMDBcbiAgICAgICAgIFxuICAgICAgICBpZiBkLmRpc2tzSU8/XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJfc2VjID0gZC5kaXNrc0lPLnJJT19zZWNcbiAgICAgICAgICAgIHdfc2VjID0gZC5kaXNrc0lPLndJT19zZWNcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcl9tYXggPSBNYXRoLm1heCByX21heCwgcl9zZWNcbiAgICAgICAgICAgIHdfbWF4ID0gTWF0aC5tYXggd19tYXgsIHdfc2VjXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIG5kLmRzayA9IFxuICAgICAgICAgICAgICAgIHJfZmFjOiByX3NlYy9yX21heFxuICAgICAgICAgICAgICAgIHdfZmFjOiB3X3NlYy93X21heFxuICAgICAgICAgICAgICAgIHJfc2VjOiByX3NlY1xuICAgICAgICAgICAgICAgIHdfc2VjOiB3X3NlY1xuICAgICAgICAgICAgICAgIHJfbWF4OiByX21heFxuICAgICAgICAgICAgICAgIHdfbWF4OiB3X21heFxuICAgICAgICBcbiAgICAgICAgcHJvY2Vzcy5zZW5kIEpTT04uc3RyaW5naWZ5IG5kXG4gICAgICAgIFxuICAgIHNldFRpbWVvdXQgdGljaywgMTAwMCAtIChuZXcgRGF0ZSkuZ2V0TWlsbGlzZWNvbmRzKClcblxudGljaygpXG4iXX0=
//# sourceURL=../coffee/memnet.coffee